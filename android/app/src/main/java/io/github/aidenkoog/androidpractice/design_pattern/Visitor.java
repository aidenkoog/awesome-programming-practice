package io.github.aidenkoog.androidpractice.design_pattern;

/*
 * 기능이 모여있는 패턴
 * 추상클래스에서 특정 메소드를 정의하고 구체 클래스에서 구현하는 것보다
 * 그 메소드를 구현하는 비지터 클래스를 만드는 방법이 있음.
 * 요소 변화 없고 기능의 추가 삭제가 자주 발생할 때 사용하는 것이 좋음.
 * 요소가 추가가 되면 인터페이스 비지터 내에 함수 추가 불가피함. 요소가 10개 100개 늘어나면 인터페이스 비지터 내 함수가 계속 증가하는 문제 발생.
 * 캡슐화 전략에는 위배되는 패턴
 * 주로 Composite 패턴에서 자주 사용될 수 있음
 */
public class Visitor {
}
